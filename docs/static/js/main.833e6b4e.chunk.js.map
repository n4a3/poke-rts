{"version":3,"sources":["views/App/App.styles.ts","views/App/ItemList/Item/Item.styles.ts","views/App/ItemList/Item/Item.tsx","components/Button/Button.styles.ts","components/Button/Button.tsx","views/App/ItemList/ItemList.styles.ts","views/App/ItemList/ItemList.tsx","views/App/ItemInfo/ItemInfo.styles.ts","views/App/ItemInfo/ItemInfo.tsx","views/App/App.tsx","serviceWorker.ts","services/pokeapi.ts","stores/PokemonInfoStore.ts","stores/PokemonListStore.ts","index.tsx"],"names":["Main","styled","main","_templateObject","Title","a","_templateObject2","Wrapper","section","_templateObject3","SItem","li","Item_styles_templateObject","inject","_ref","children","url","pokemonInfoStore","react_default","createElement","Item_styles","onClick","fetchPokemon","reg","match","getInfo","Btn","button","Button_styles_templateObject","Button","Button_styles","div","ItemList_styles_templateObject","List","ul","ItemList_styles_templateObject2","Buttons","ItemList_styles_templateObject3","ItemList","observer","this","props","pokemonListStore","fetchPokemonList","fetchPokemons","items","state","_ref2","prevOffset","nextOffset","ItemList_styles_Wrapper","react","map","item","index","ItemList_Item_Item","key","name","components_Button_Button","Component","Card","ItemInfo_styles_templateObject","Pic","img","ItemInfo_styles_templateObject2","Name","h2","ItemInfo_styles_templateObject3","Desc","p","_templateObject4","ItemInfo","id","weight","height","image","src","App","href","ItemList_ItemList","ItemInfo_ItemInfo","Boolean","window","location","hostname","pokeapi","_baseUrl","path","fetch","concat","then","data","status","json","error","errorText","Object","objectSpread","catch","err","message","offset","res","console","log","action","bound","_this","_data$data","sprites","front_default","observable","currentOffset","results","maxOffset","Math","trunc","count","ReactDOM","render","mobx_react_module","views_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.833e6b4e.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Main = styled.main`\n  font-family: \"Arial\";\n  font-size: 18px;\n`;\n\nexport const Title = styled.a`\n  text-decoration: none;\n  font-size: 2rem;\n  color: #12b0ce;\n  text-align: center;\n  display: block;\n  :hover {\n    color: #cb0021;\n  }\n`;\n\nexport const Wrapper = styled.section`\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-evenly;\n  margin-top: 2rem;\n`;\n","import styled from \"styled-components\";\n\nconst SItem = styled.li`\n  width: 50%;\n  box-sizing: border-box;\n  padding: 1rem;\n  border: 1px solid #000000;\n  margin-top: -1px;\n  margin-left: -1px;\n  cursor: pointer;\n  text-transform: capitalize;\n`;\n\nexport default SItem;\n","import React from \"react\";\nimport { inject } from \"mobx-react\";\n\nimport { IPokemonInfo } from \"../../../../stores/PokemonInfoStore\";\n\nimport SItem from \"./Item.styles\";\n\ninterface IItem {\n  children: string;\n  url: string;\n}\n\ninterface InjectedProps extends IItem {\n  pokemonInfoStore?: IPokemonInfo;\n}\n\nconst Item: React.FC<InjectedProps> = ({ children, url, pokemonInfoStore }) => {\n  const getInfo = () => {\n    const { fetchPokemon } = pokemonInfoStore!;\n    const reg = url.match(/pokemon\\/(\\d+)\\/$/);\n    if (reg) {\n      fetchPokemon(+reg[1]);\n    }\n  };\n  return <SItem onClick={() => getInfo()}>{children}</SItem>;\n};\n\nexport default inject(\"pokemonInfoStore\")(Item);\n","import styled from \"styled-components\";\n\nconst Btn = styled.button``;\n\nexport default Btn;\n","import React from \"react\";\nimport Btn from \"./Button.styles\";\n\ninterface Props {\n  children: string;\n  onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nconst Button: React.FC<Props> = ({ children, onClick }) => {\n  return <Btn onClick={onClick}>{children}</Btn>;\n};\n\nexport default Button;\n","import styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  width: 300px;\n  position: relative;\n`;\n\nconst List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  padding: 0;\n  margin: 0;\n  text-align: center;\n`;\n\nconst Buttons = styled.div`\n  position: absolute;\n`;\n\nexport { Wrapper, List, Buttons };\n","import React, { Component, Fragment } from \"react\";\nimport { observer, inject } from \"mobx-react\";\n\nimport { IPokemonList, IPokemonItem } from \"../../../stores/PokemonListStore\";\nimport { IPokemonInfo } from \"../../../stores/PokemonInfoStore\";\nimport Item from \"./Item\";\nimport Button from \"../../../components/Button\";\nimport { Wrapper, List, Buttons } from \"./ItemList.styles\";\n\ninterface InjectedProps {\n  pokemonListStore?: IPokemonList;\n  pokemonInfoStore?: IPokemonInfo;\n}\n\n@inject(\"pokemonListStore\", \"pokemonInfoStore\")\n@observer\nexport default class ItemList extends Component<InjectedProps> {\n  private fetchPokemons() {\n    this.props.pokemonListStore!.fetchPokemonList();\n  }\n\n  componentDidMount() {\n    this.fetchPokemons();\n  }\n\n  render() {\n    const { items, state } = this.props.pokemonListStore!;\n    const { prevOffset, nextOffset } = this.props.pokemonListStore!;\n    return (\n      <Wrapper>\n        {state === \"fetching\" ? \"loading...\" : null}\n        {state === \"error\" ? \"error\" : null}\n        {state === \"success\" ? (\n          <Fragment>\n            <List>\n              {items.map((item: IPokemonItem, index) => {\n                return (\n                  <Item key={index} url={item.url}>\n                    {item.name}\n                  </Item>\n                );\n              })}\n            </List>\n            <Buttons>\n              <Button onClick={() => prevOffset()}>Prev</Button>\n              <Button onClick={() => nextOffset()}>Next</Button>\n            </Buttons>\n          </Fragment>\n        ) : null}\n      </Wrapper>\n    );\n  }\n}\n","import styled from \"styled-components\";\n\nconst Card = styled.div`\n  background-color: #eceee1;\n  color: blueviolet;\n  width: 250px;\n  text-align: center;\n`;\n\nconst Pic = styled.img`\n  width: 100%;\n  image-rendering: pixelated;\n`;\n\nconst Name = styled.h2`\n  text-transform: capitalize;\n`;\n\nconst Desc = styled.p``;\n\nexport { Card, Pic, Name, Desc };\n","import React, { Component, Fragment } from \"react\";\nimport { inject, observer } from \"mobx-react\";\n\nimport { IPokemonInfo } from \"../../../stores/PokemonInfoStore\";\n\nimport { Card, Pic, Name, Desc } from \"./ItemInfo.styles\";\n\ninterface InjectedProps {\n  pokemonInfoStore?: IPokemonInfo;\n}\n@inject(\"pokemonInfoStore\")\n@observer\nexport default class ItemInfo extends Component<InjectedProps> {\n  render() {\n    const {\n      id,\n      name,\n      weight,\n      height,\n      image,\n      state\n    } = this.props.pokemonInfoStore!;\n\n    return (\n      <Card>\n        {state === \"fetching\" ? \"loading...\" : null}\n        {state === \"error\" ? \"error\" : null}\n        {state === \"success\" ? (\n          <Fragment>\n            <Name>\n              {name} | ID: {id}\n            </Name>\n            <Desc>\n              Weight: {weight} | Height: {height}\n            </Desc>\n            <Pic src={image!} />\n          </Fragment>\n        ) : null}\n      </Card>\n    );\n  }\n}\n","import React from \"react\";\n\nimport { Main, Title, Wrapper } from \"./App.styles\";\n\nimport ItemList from \"./ItemList/ItemList\";\nimport ItemInfo from \"./ItemInfo/ItemInfo\";\n\nconst App: React.FC = () => {\n  return (\n    <Main>\n      <Title href=\"https://github.com/n4a3/poke-rts\">\n        PokeAPI: React + TypeScript + MobX + Styled Components\n      </Title>\n      <Wrapper>\n        <ItemList />\n        <ItemInfo />\n      </Wrapper>\n    </Main>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","class PokeApi {\n  private readonly _baseUrl = \"https://pokeapi.co/api/v2\";\n\n  private async fetch(path: string) {\n    return await fetch(`${this._baseUrl}/${path}`)\n      .then(data => {\n        switch (data.status) {\n          case 200:\n            return data.json();\n\n          case 404:\n            return { error: data.status, errorText: \"Not found!\" };\n\n          default:\n            return { error: data.status, errorText: \"Unknown error\" };\n        }\n      })\n      .then(json => {\n        return json.error\n          ? {\n              data: null,\n              ...json\n            }\n          : {\n              data: { ...json },\n              error: null\n            };\n      })\n      .catch(err => {\n        return { data: null, error: 599, errorText: err.message };\n      });\n  }\n\n  async fetchPokemons(offset = 0) {\n    const res = await this.fetch(`pokemon/?offset=${offset}&limit=20`);\n    console.log(\"service:\", res);\n    return res;\n  }\n\n  async fetchPokemon(id: number) {\n    const res = await this.fetch(`pokemon/${id}`);\n    console.log(\"service:\", res);\n    return res;\n  }\n}\n\nconst pokeapi = new PokeApi();\n\nexport default pokeapi;\n","import { observable, action } from \"mobx\";\nimport pokeapi from \"../services/pokeapi\";\n\nexport interface IPokemonInfo {\n  id: number;\n  name: string;\n  weight: number;\n  height: number;\n  image: string | null;\n  state: string | null;\n  fetchPokemon(id: number): void;\n}\n\nclass PokemonInfo implements IPokemonInfo {\n  @observable id: number;\n  @observable name: string;\n  @observable weight: number;\n  @observable height: number;\n  @observable image: string;\n  @observable state: string | null = null;\n\n  @action.bound\n  fetchPokemon(id: number) {\n    this.state = \"fetching\";\n    pokeapi.fetchPokemon(id).then(\n      action(\"response from service\", (data: any) => {\n        if (data.error) {\n          this.state = \"error\";\n          return;\n        }\n        const { id, name, weight, height } = data.data;\n        const image = data.data.sprites.front_default;\n        this.id = id;\n        this.name = name;\n        this.weight = weight;\n        this.height = height;\n        if (image) {\n          this.image = image;\n        } else {\n          this.image = \"https://via.placeholder.com/100?text=404\";\n        }\n        this.state = \"success\";\n      }),\n      action(\"fetch error\", () => {\n        this.state = \"error\";\n      })\n    );\n  }\n}\n\nconst pokemonInfoStore = new PokemonInfo();\n\nexport default pokemonInfoStore;\n","import { observable, action } from \"mobx\";\nimport pokeapi from \"../services/pokeapi\";\n\nexport interface IPokemonItem {\n  url: string;\n  name: string;\n}\n\nexport interface IPokemonList {\n  items: Array<IPokemonItem>;\n  currentOffset: number;\n  maxOffset: number;\n  state: string | null;\n  fetchPokemonList(): void;\n  prevOffset(): void;\n  nextOffset(): void;\n}\n\nclass PokemonList implements IPokemonList {\n  @observable items: Array<IPokemonItem>;\n  @observable currentOffset: number = 0;\n  @observable maxOffset: number;\n  @observable state: string | null = null;\n\n  @action.bound\n  fetchPokemonList() {\n    this.state = \"fetching\";\n    pokeapi.fetchPokemons(this.currentOffset).then(\n      action(\"response from service\", (data: any) => {\n        if (data.error) {\n          this.state = \"error\";\n          return;\n        }\n        this.items = data.data.results;\n        this.maxOffset = Math.trunc(data.data.count / 20) * 20;\n        this.state = \"success\";\n      }),\n      action(\"fetch error\", () => {\n        this.state = \"error\";\n      })\n    );\n  }\n\n  @action.bound\n  prevOffset() {\n    if (this.currentOffset >= 20) {\n      this.currentOffset -= 20;\n      this.fetchPokemonList();\n    }\n  }\n\n  @action.bound\n  nextOffset() {\n    if (this.currentOffset < this.maxOffset) {\n      this.currentOffset += 20;\n      this.fetchPokemonList();\n    }\n  }\n}\n\nconst pokemonListStore = new PokemonList();\n\nexport default pokemonListStore;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./views/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"mobx-react\";\nimport pokemonInfoStore from \"./stores/PokemonInfoStore\";\nimport pokemonListStore from \"./stores/PokemonListStore\";\n\nReactDOM.render(\n  <Provider\n    pokemonInfoStore={pokemonInfoStore}\n    pokemonListStore={pokemonListStore}\n  >\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}